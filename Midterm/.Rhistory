id <- data.frame(city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi"), gauge)
for(i in 1:length(gauge)) {
assign(paste0("", i),
read.csv2(paste0("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data",
gauge [i])))
}
for(i in 1:length(gauge)) {
assign(paste0("", i),
read.csv2(paste0("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data\\",
gauge [i])))
}
gauge <- list.files("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
id <- data.frame(city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi"), gauge)
for(i in 1:length(gauge)) {
assign(paste0("", i),
read.csv2(paste0("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data\\",
gauge [i])))
}
gauge <- list.files("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
id <- data.frame(city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi"), gauge)
gaugeid <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
for(i in 1:length(gaugeid)) {
assign(paste0("gauge", i),
read.csv(paste0("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data/",
gaugeid[i])))
}
gaugeid <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
for(i in 1:length(gaugeid)) {
assign(paste0("gauge", i),
read.csv(paste0("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data/",
gaugeid[i])))
}
gauge1$City <- "Boston"
gauge2$City <- "New York"
gauge3$City <- "Baltimore"
gauge4$City <- "Charleston"
gauge5$City <- "Miami"
gauge6$City <- "Corpus Christi"
allgauge <- rbind(gauge1,gauge2,gauge3,gauge4,gauge5,gauge6)
#Hint: Use paste0() to combine data and characters (i.e. the required separators "-")
allgauge$Date <- as.Date(paste(allgauge$Year,allgauge$Month,"1",sep="-"))
View(allgauge)
View(allgauge)
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line()
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + labs(x="Date", y="Average Daily High Water Level")
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level")
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm", inherit.aes=FALSE) + labs(x="Date", y="Average Daily High Water Level")
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level")
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level") + facet_wrap()
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level") + facet_wrap(~align)
#Hint: you should only need minor modification of the code from question 4 to make this plot
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level") + facet_wrap(~City)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm", inherit.aes=FALSE) + labs(x="Date", y="Average Daily High Water Level")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level")
ggplot(allgauge, aes(x=City, y=Highest)) +
geom_boxplot()
ggplot(allgauge, aes(x=City, y=Highest)) +
geom_boxplot() + labs(x="City", y="Monthly Highest Tide (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level (m above MHHW")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm", inherit.aes=FALSE) + labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm") + labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#Hint: The which.max() function might be useful here
which.max(allgauge$Highest)
allgauge[141,]
#Hint: the formula in your lm() function is of the form y~x where y here is MHHW and x is your date column
lm(MHHW~Date, data=allgauge)
#Hint: the formula in your lm() function is of the form y~x where y here is MHHW and x is your date column
lin_mhhw <- lm(MHHW~Date, data=allgauge)
lin_mhhw
summary.lm(lin_mhhw)
summary(lin_mhhw)$coefficients
#Hint: the formula in your lm() function is of the form y~x where y here is MHHW and x is your date column
lin_mhhw <- lm(MHHW~Date, data=allgauge)
lin_mhhw
summary.lm(lin_mhhw)
#y=ax+b
lin_mhhw
require("knitr")
opts_knit$set(root.dir = "C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\") #use this to set your working directory so knitr understands it
country <- read.csv(C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\countrytotals)
country <- read.csv(C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W5 Lab/countrytotals)
country <- read.csv(countrytotals)
country <- read.csv(C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\countrytotals.csv)
country <- read.csv(C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W5 Lab/countrytotals.csv)
country <- data.frame(read.csv(C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W5 Lab/countrytotals.csv))
read.csv(C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W5 Lab/countrytotals.csv))
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() + geom_smooth(method="lm",inherit.aes=FALSE) + labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() +
geom_smooth(method="lm") +
labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() +
geom_smooth(method="lm", aes(x=Date, y=MHHW)) +
labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() +
geom_smooth(method="lm", aes(x=Date, y=MHHW), inherit.aes = FALSE) +
labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
2.732/(10^5)*365*10-0.3399
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() +
geom_smooth(method="lm", aes(x=Date, y=MHHW), inherit.aes = FALSE, color=black) +
labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
#if you don't already have ggplot2 then install it with install.packages("ggplot2")
library(ggplot2)
ggplot(allgauge, aes(x=Date, y=MHHW, groups=City, color=City)) +
geom_line() +
geom_smooth(method="lm", aes(x=Date, y=MHHW), inherit.aes = FALSE, col="black") +
labs(x="Date", y="Average Daily High Water Level (m above MHHW)")
gauge <- list.files("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi")
id <- data.frame(city, gauge)
gaugeid <- list.files(pattern="csv")
citygauge <- lapply(gaugeid, read.csv)
for(i in 1:length(city)) {
citygauge[[i]]$City <- rep(city[i], nrow(tbles[[i]]))
}
citygauge[[i]]$City <- rep(city[i], nrow(citygauge[[i]]))
gauge <- list.files("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
id <- data.frame(city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi"), gauge)
#Hint: you can use list.files() to get a vector of all the file names in a directory. Setting full.names=TRUE in the list.files() function will give you the full path name that can be used by read.csv
#Hint 2: you might want to create a data frame using the first csv file. Then loop through from files 2 to 6 reading in the csv file and using rbind() to attach it to the bottom of your full data frame
#Hint 3: It will be easiest to add the names of the city to the data frames immediately after reading them in, before binding everything together into a single data-frame
gaugeid <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
for(i in 1:length(gaugeid)) {
assign(paste0("gauge", i),
read.csv(paste0("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data/",
gaugeid[i])))
}
gauge1$City <- "Boston"
gauge2$City <- "New York"
gauge3$City <- "Baltimore"
gauge4$City <- "Charleston"
gauge5$City <- "Miami"
gauge6$City <- "Corpus Christi"
allgauge <- rbind(gauge1,gauge2,gauge3,gauge4,gauge5,gauge6)
require("knitr")
opts_knit$set(root.dir = "C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\") #use this to set your working directory so knitr understands it
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
list.files(full.names=TRUE)
files <- list.files(pattern='csv')
tables <- lapply(files, read.csv)
city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi")
city <- c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi")
gauge <- c("8443970","8518750","8574680","8665530","8723214","8775296")
id <- data.frame(city, gauge)
gauge <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
id <- data.frame(city, gauge)
tables[[i]]$City <- rep(city[i], nrow(tables[[i]]))
tables[[i]]$City <- rep(City[i], nrow(tables[[i]]))
for(i in 1:length(city)) {
tables[[i]]$City <- rep(City[i], nrow(tables[[i]]))
}
for(i in 1:length(city)) {
tables[[i]]$city <- rep(city[i], nrow(tables[[i]]))
}
for(i in 1:length(city)) {
tables[[i]]$city <- rep(city[i], nrow(tables[[i]]))
}
require("knitr")
opts_knit$set(root.dir = "C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\") #use this to set your working directory so knitr understands it
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab")
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
View(country)
View(country)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
order(country$total, decreasing=TRUE)
country$country[35,37,46,21,49]
country$country[35]
country$country[35, 37]
country$country[1:5]
country$country[1:5, order(country$total, decreasing=TRUE)]
order(country$total, decreasing=TRUE)
population = 5
order(country$total, decreasing=TRUE)
t <- order(country$total, decreasing=TRUE)
colnames(country$country[sample(5)])
rownames(country$country[sample(5)])
rownames(country[sample(5)])
colnames(country[sample(5)])
t[1:5]
t <- data.frame(order(country$total, decreasing=TRUE), country$country)
t[1:5]
head(t)
?order
country[order(country$total, decreasing=TRUE)]
print(country[order(country$total, decreasing=TRUE)])
print(country[order(country$total, decreasing=TRUE),])
country[order(country$total, decreasing=TRUE),]
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
?sample
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
?population
sample(
country[order(country$total, decreasing=TRUE),],5)
country[order(country$total, decreasing=TRUE),]
head(country[order(country$total, decreasing=TRUE),])
country[1:5]
country[1:5, country[order(country$total, decreasing=TRUE),]]
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
library(dplyr)
top_n(country,5,total)
t
library(dplyr)
top_n(country,5,total)
order(top_n(country,5,total))
top_n(country,5,total)
t <- country[order(top_n(country,5,total),
decreasing=TRUE),]
t <- top_n(country,5,total)
country[order(t, decreasing=TRUE),]
order(t, decreasing=TRUE)
t <- country[order(country$total,
decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=1))
top5 <- Reduce(cbind,
by(t,
t["country"],
head,
n=1))
top5
top5 <- Reduce(cbind,
by(t,
t["country"],
head,
n=5))
top5
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=2))
top5
?Reduce
t <- country[order(country$total,
decreasing=TRUE),]
head (t)
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
n_top(country, 5, total)
top_n(country, 5, total)
top5 <- top_n(country, 5, total)
order(top5, descending=TRUE)
View(top5)
View(top5)
order(top5$total, descending=TRUE)
t5 <- order(top5$total, descending=TRUE)
top5
top5 >%>
top5 <- top_n(country, 5, total)
arrange(top5)
arrange(top5, desc())
arrange.data.frame(top5, desc())
arrange(top5,...,desc())
arrange(top5,desc())
arrange(desc(top5))
arrange(top5, desc(), total)
arrange(top5, desc())
arrange(top5, desc(), .by_group=TRUE)
arrange(top5, desc(total), .by_group=TRUE)
arrange(top5, desc(total))
top5 <- arrange(top5, desc(total))
View(top5)
top5 <- arrange(top_n(country, 5, total), desc(total))
top5
plot(countries~volunteers, data=country)
plot(country~volunteers, data=country)
plot(country~volunteers, data=country, ylim=0,705000)
t <-
head (country[order(country$total,
decreasing=TRUE),])
head (country[order(country$total,
decreasing=TRUE),])
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
tidytue <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
tidytue <- read.csv("countrytotals.csv")
head (tidytue[order(tidytue$total,
decreasing=TRUE),])
library(dplyr)
top5 <- arrange(top_n(tidytue, 5, total), desc(total))
top5
library(ggplot2)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point()
library(ggplot2)
ggplot(tidytue, aes(x = country)) +
geom_histogram(binwidth = .5)
library(ggplot2)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram()
library(ggplot2)
ggplot(tidytue, aes(x=country)) +
geom_histogram()
View(tidytue)
library(ggplot2)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram()
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram(bins=3)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram(bins=10)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,50) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,1000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,705000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,7000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,705000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)
ggplot(tidytue, aes(x=volunteers, y=country)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()+
scale_x_continuous(n.breaks=10) +
scale_y_continuous(n.breaks=10)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "count", width=1) +
coord_flip()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity") +
coord_flip()
# Chunk 1
library(knitr)
# Chunk 2
tab <- cbind(Name=c("speciesid", "speciesname", "taxon", "conservation status", "listed"), Description = c("unique ID", "scientific name", "Species group", "Conservation status in North America, according to   [NatureServe](https://www.natureserve.org/conservation-tools/conservation-rank-calculator): 1 = Critically Imperiled; 2 = Imperiled; 3 = Vulnerable; 4 = Apparently Secure; 5 = Secure; UNK = Unknown; Prob. Extinct = Probably Extinct; Extinct", "Is the species listed as threatened or endangered under the US Endangered Species Act: 0 = No; 1 = Yes"))
knitr::kable(tab, caption ='Table 1. Variables in "consevationdata.csv"' )
# Chunk 3
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\Midterm")
consdata <- read.csv("conservationdata.csv")
# Chunk 4
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
end/all*100
end_fr <- cat(end/end,"/",all/end)
# Chunk 5
taxon_df <- data.frame(table(consdata$taxon))
taxon_df <- cbind(taxon_df, taxon_df$Freq/all*100)
colnames(taxon_df) <- c("Taxonomic Groups", "Number of Species", "Percentage (%)")
taxon_df
# Chunk 6
ts <- data.frame (consdata$taxon, consdata$conservation_status)
tsf <- as.data.frame(table(ts))
colnames(tsf) <- c("Taxonomic Groups", "Conservation Status", "Frequency")
library(ggplot2)
ggplot(tsf, aes(fill=`Conservation Status`, y=Frequency, x=`Taxonomic Groups`)) +
geom_bar(position="stack", stat="identity")
# Chunk 7
spend <- read.csv("spendingdata.csv")
# Chunk 8
spend2016 <- subset(spend, Year == "2016")
ggplot(spend2016, aes(x=spending)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
# Chunk 9
head (spend2016[order(spend2016$spending,
decreasing=TRUE),])
cons_spend <- merge(consdata, spend, by="speciesid")
subset(cons_spend, speciesid == "1632")
which(cons_spend$speciesid == "1632")
which(cons_spend$speciesid == "1632" & cons_spend$speciesid$Year == "2016")
which(cons_spend$speciesid == "1632" & cons_spend$Year == "2016")
cons_spend[which(cons_spend$speciesid == "1632" & cons_spend$Year == "2016"),
]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1632", "4486", "1684"),
]
cons_spend[which(Year == "2016" & speciesid == "1632"),]
cons_spend[which(cons_spend$Year == "2016" & (cons_spend$speciesid == "1632" & "4486" & "1684")),]
cons_spend[which(cons_spend$Year == "2016" & (cons_spend$speciesid == "1632" | "4486" | "1684")),]
cons_spend[which(cons_spend$Year == "2016" & (cons_spend$speciesid == "1632"),]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1632",]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1632", "4486", "1684"),]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1632"),]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "4486"),]
cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1684"),]
spc <- data.frame()
rbind.data.frame(top1, top2, top3)
top1 <- cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1632"),]
top2 <- cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "4486"),]
top3 <- cons_spend[which(cons_spend$Year == "2016" & cons_spend$speciesid == "1684"),]
rbind.data.frame(top1, top2, top3)
spc <- rbind.data.frame(top1, top2, top3)
spc
View(spc)
cons_spend[-c(which(cons_spend$spending == "0"),]
cons_spend[cons_spend$spending!="0"),]
cons_spend[cons_spend$spending!="0",]
cslog <- cons_spend[cons_spend$spending!="0",]
View(cslog)
cslog <- transform(
cslog, log_spending = log(cslog$spending))
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="#69b3a2", color="#e9ecef")
, alpha=0.8
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
reg <- lm(log_spending~taxon, data=cslog)
summary.lm(reg)
