f <- is.related(bluew, wco, "intersects")
x = table(f)
x[2] / sum(x)
w <- tapply(bluew$date, bluew$ind_ident, function(x) x)
nrow(w)
```{r}
```{r}
knitr::opts_chunk$set(echo = TRUE)
path <- "...."
knitr::opts_knit$set(root.dir = path)
setwd(path)
install.packages('terra', repos='https://rspatial.r-universe.dev')
library(terra)
setwd('C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W6 Lab\\')
unzip('Lab 6.zip')
bluew <- vect('Blue Whale Migration Data\\points.shp')
install.packages("terra", repos = "https://rspatial.r-universe.dev")
summary(bluew$ind_ident)
install.packages('geodata')
wrld <- geodata::world(path="C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W6 Lab\\")
# Step 1. plot the countries using the extent of the whale data to only show the area of interest.
# the area of interest
aoi <- ext(bluew) + 2
plot(wrld, ext=aoi, col='grey83', background='lightcyan')
#Step 2: plot the whale points. You can use either the "points" method or "plot( , add=TRUE)". The latter is easier for coloring, but you need to tell it not to add a legend.
n <- (nrow(bluew))
plot(bluew, col=rainbow(n), cex=0.4, pch=16, alpha=1, legend=FALSE, add=TRUE)
w8 <- subset(bluew, bluew$ind_ident=="2008CA-Bmu-00825")
install.packages("geodata")
w5 <- subset(bluew, bluew$ind_ident=="2005CA-Bmu-10821")
ww <- rbind(w8, w5)
aoi <- ext(bluew) + 2
plot(wrld, ext=aoi, col='grey83', background='lightcyan')
plot(ww, "ind_ident", col=c("red", "blue"), cex=.4, pch=16, alpha=1, plg=list(x=-152, y=10, cex=.5, bty = "o"), add=TRUE)
mpa <- vect('MPAs\\mpas.shp')
head(mpa)
#Hint: use the crop() function
e <- ext(-128, -115, 32, 40)
wco <- crop(mpa, e)
plot(wrld, ext=e, col='grey83')
lines(wco, col="blue")
f <- is.related(bluew, wco, "intersects")
x = table(f)
x[2] / sum(x)
g <- tapply(bluew$date, bluew$ind_ident, function(x) x)
nrow(g)
```{r}
r <- rast(wco, res=1/6)
r <- rasterize(bluew, r, fun="count")
r
nrow(r)
nrow(r) / nrow(g)
plot(r)
polys(wrld, col='grey83')
lines(wco, col="blue")
distance(r)
t <- extract(r, bluew)
library(ggplot2)
ggplot(t, aes(x=count)) +
geom_histogram(bins=30, fill="turquoise", color="#e9ecef", alpha=0.9) +
ggtitle("Distribution of Blue Whale Observation") +
labs(x="Blue Whale Observation", y="Frequency")
aoi <- ext(bluew) + 2
plot(wrld, ext=aoi, col='grey83', background='lightcyan')
plot(ww, "ind_ident", col=c("red", "blue"), cex=.4, pch=16, alpha=1, plg=list(x=-152, y=10, cex=.5, bty = "o"), add=TRUE)
table(f)
x[2] / sum(x)
f <- is.related(bluew, wco, "intersects")
x = table(f)
table(f)
x[2] / sum(x)
length(g)
for (i in length(g)) {
g[i] <- TRUE %in% is.related(bluew[which(bluew$ind_ident == unique(bluew$ind_ident)[i])], wco, "intersects")
}
g
length(g)
g <- tapply(bluew$date, bluew$ind_ident, fun="count")
length(g)
table(g)
summary(g)
g <- tapply(bluew$date, bluew$ind_ident, function(x) x)
length(g)
y <- rast(g)
values(blew)
values(bluew)
values(bluew)<-value
setvalues(bluew,values)
setValues(bluew,values)
setValues(g,values)
names(bluew)
geom(bluew)
ncol(bluew)
nrow(bluew)
extract(bluew)
g <- is.related(tapply(bluew$date, bluew$ind_ident, function(x) x), wco, "intersects")
g <- is.related (r, wco, "intersects")
g <- is.related(bluew$ind_ident, wco, "intersects")
w <- tapply(bluew$date, bluew$ind_ident, function(x) x)
View(w)
g <- as.logical(w)
g <- unlist(w)
g
head(g)
g <- as.logical(as.list((w))
g <- as.logical(as.list(w))
w <- subset(bluew, tapply(bluew$date, bluew$ind_ident, function(x) x))
subset(bluew, ind_ident %in% w)
w <- as.list(tapply(bluew$date, bluew$ind_ident, function(x) x))
View(w)
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) x))
View(w)
w <- as.list(as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) x)))
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) x))
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, x)
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, x))
w <- tapply(bluew$date, bluew$ind_ident, x)
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
w <- as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x))))
w <- tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
w <-  as.data.frame(tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x))))
w <-  as.vector(tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x))))
w <-  as.data.frame(apply(bluew$date, bluew$ind_ident, function(x) length(unique(x))))
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
subset(bluew, w, ind_ident)
subset(bluew, subset=rownames(bluew) == w)
w <-  tapply(bluew$ind_ident, bluew$date, function(x) length(unique(x)))
w
w <-  tapply(bluew$ind_ident, bluew$date, function(x) x)
w
View(w)
as.list(w)
subset(bluew, subset=rownames(bluew) == w)
rownames(w)
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
rownames(w)
g <- as.list(rownames(w))
View(g)
g <- as.data.frame(rownames(w))
View(g)
subset(bluew, subset=rownames(bluew) == g)
View(g)
colnames(g)<-ind
colnames(g)<-'ind'
subset(bluew, subset=rownames(bluew) == g$ind)
subset(bluew, bluew$ind_ident == g$ind)
y <- subset(bluew, bluew$ind_ident == g$ind)
f <- is.related(y, wco, "intersects")
f <- is.related(bluew, wco, "intersects")
x = table(f)
table(f)
x[2] / sum(x)
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(g)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
g <- is.related(y, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
table(g)
y[2] / sum(y)
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(g)<-'ind'
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
g <- is.related(y, wco, "intersects")
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
w <-  tapply(bluew$date, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
View(iw)
View(ind)
nrow(iw)
nrow(w)
nrow(iw)
head(bluew)
w <-  tapply(bluew$timestamp, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
rownames(bluew)
names(bluew)
w <-  tapply(bluew$calc_freq, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
g <- is.related(iw, wco, "intersects")
y = table(g)
names(bluew)
w <-  tapply(bluew$calc_freq, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
w <-  tapply(bluew$calc_freq, bluew$ind_ident, function(x) length(unique(x)))
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
View(bluew)
head(bluew)
head(bluew)
w <-  tapply(bluew$calc_freq, bluew$ind_ident, function(x) x)
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
head(bluew)
w <-  tapply(bluew$calc_freq, bluew$ind_ident, function(x) x)
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(w)/nrow(iw)
nrow(iw)
nrow(w)
nrow(iw)/nrow(w)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
y[2]
nrow(w)
y[2] / nrow(w)
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
nrow(w)
nrow(iw)/nrow(w)
nrow(iw)
nrow(w)
nrow(iw)/nrow(w)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
y[2]
nrow(w)
y[2] / nrow(w)
ind <- as.data.frame(rownames(w))
colnames(ind)<-'ind'
iw <- subset(bluew, bluew$ind_ident == ind$ind)
nrow(iw)
nrow(w)
nrow(iw)/nrow(w)
nrow(iw)
nrow(w)
nrow(iw)/nrow(w)
g <- is.related(iw, wco, "intersects")
y = table(g)
table(g)
y[2] / sum(y)
y[2]
nrow(w)
y[2] / nrow(w)
knitr::opts_chunk$set(echo = TRUE)
path <- "...."
knitr::opts_knit$set(root.dir = path)
setwd(path)
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages("terra", repos = "https://rspatial.r-universe.dev")
knitr::opts_chunk$set(echo = TRUE)
path <- "...."
knitr::opts_knit$set(root.dir = path)
setwd(path)
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages("terra", repos = "https://rspatial.r-universe.dev")
knitr::opts_chunk$set(echo = TRUE)
table(pop10$NAME[1:10])
pop10$NAME[1:10]
knitr::opts_chunk$set(echo = TRUE)
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
filename <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
hc <- rast(filename, "TREFHT")
ext(hc)
hc <- rotate(hc)
ext(hc)
#Hint 1: Check the object type of the POP2020 column. If necessary convert to a numeric vector using as.numeric()
#Hint 2: The function order() will give you the index value corresponding to the ascending or descending numerical order of a column
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
pop10 <- pop[order(pop$POP2020, decreasing = TRUE), ]
ext(hc)
hc <- rotate(hc)
ext(hc)
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
install.packages("rnaturalearth")
install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
library(terra)
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
filename <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
hc <- rast(filename, "TREFHT")
ext(hc)
hc <- rotate(hc)
ext(hc)
#Hint 1: Check the object type of the POP2020 column. If necessary convert to a numeric vector using as.numeric()
#Hint 2: The function order() will give you the index value corresponding to the ascending or descending numerical order of a column
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
pop <- vect(rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
))
class(pop)
knitr::opts_chunk$set(echo = TRUE)
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
filename <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
hc <- rast(filename, "TREFHT")
ext(hc)
hc <- rotate(hc)
ext(hc)
#Hint 1: Check the object type of the POP2020 column. If necessary convert to a numeric vector using as.numeric()
#Hint 2: The function order() will give you the index value corresponding to the ascending or descending numerical order of a column
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
install.packages("rnaturalearth")
knitr::opts_chunk$set(echo = TRUE)
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
pop <- terra::vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
class(pop)
pop10 <- pop[order(pop$POP2020, decreasing = TRUE), ]
pop10$NAME[1:10]
plot(hc[[1]])
terra::plot(hc[[1]])
library(terra)
hc
terra::plot(hc[[1]])
plot(hc[[1]])
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
filename <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
hc <- rast(filename, "TREFHT")
hc
ext(hc)
hc <- rotate(hc)
ext(hc)
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- terra::vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
class(pop)
pop10 <- pop[order(pop$POP2020, decreasing = TRUE), ]
pop10$NAME[1:10]
plot(hc[[1]])
points(pop10)
values(hc)
units(hc)
cover(hc, "1")
head(hc)
hc-273.15
hc
hc-273.15
hc <- (hc-273.15)
units(hc) <- "C"
hc
obs_temp <- list.files("Observed Temp Data", pattern="nc$", full.names=TRUE)
ot <- rast(obs_temp, "tmp")
obs_temp <- list.files("Observed Temp Data", pattern="nc$", full.names=TRUE)
ot <- rast(obs_tem, subds="tmp", lyrs=NULL, drivers=NULL, opts=NULL, win=NULL)
ot <- rast(obs_temp, subds="tmp", lyrs=NULL, drivers=NULL, opts=NULL, win=NULL)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
obs_temp <- list.files("Observed Temp Data", pattern="nc$", full.names=TRUE)
ot <- rast(obs_temp, subds="tmp", lyrs=NULL, drivers=NULL, opts=NULL, win=NULL)
filename <- list.files("Observed Temp Data", pattern="nc$", full.names=TRUE)
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
hist_clim <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
gc()
library(terra)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
hist_clim <- list.files("Climate Model Data_Historic", pattern="nc$", full.names=TRUE)
hc <- rast(hist_clim, "TREFHT")
hc
ext(hc)
hc <- rotate(hc)
ext(hc)
#install.packages("rnaturalearth")
pop <- rnaturalearth::ne_download(
scale = 110,
type = "populated_places"
)
pop <- terra::vect(pop, geom=c("lon", "lat"), crs="", keepgeom=FALSE)
class(pop)
pop10 <- pop[order(pop$POP2020, decreasing = TRUE), ]
pop10$NAME[1:10]
plot(hc[[1]])
points(pop10)
hc <- (hc-273.15)
units(hc) <- "C"
hc
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W7 Lab\\Data")
obs_temp <- list.files("Observed Temp Data", pattern="nc$", full.names=TRUE)
ot <- rast(obs_temp, subds="tmp", lyrs=NULL, drivers=NULL, opts=NULL, win=NULL)
hc
ot
# hint: have a look at ?terra::time to see how to get years
terra::time(hc, format="years", values="1991")
# hint: have a look at ?terra::time to see how to get years
terra::time(hc, format="years")
subset(hc, 852:971)
hco <- subset(hc, 852:971)
hco
city_obs <- extract( hco, pop10, ID=FALSE)
city_sim <- extract( hc, pop10, ID=FALSE)
View(city_obs)
View(city_sim)
#load terra package and set working directory
tinytex::install_prebuilt()
#load terra package and set working directory
install.packages("tinytex")
install.packages("tinytex")
require("knitr")
opts_knit$set(root.dir="C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/midterm2")
library("tinytex")
tinytex::install_prebuilt()
require("knitr")
opts_knit$set(root.dir="C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/midterm2")
library("tinytex")
tinytex::install_tinytex
tinytex::reinstall_tinytex
require("knitr")
opts_knit$set(root.dir="C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/midterm2")
library("tinytex")
tinytex::reinstall_tinytex
library("tinytex")
tinytex::reinstall_tinytex
install.packages("tinytex")
install.packages("tinytex")
require("knitr")
opts_knit$set(root.dir="C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/midterm2")
tinytex::reinstall_tinytex
remotes::install_github('rstudio/tinytex")
library(remotes)
remotes::install_github('rstudio/tinytex")
library(remotes)
remotes::install_github('rstudio/tinytex')
library(remotes)
remotes::install_github("rstudio/tinytex")
