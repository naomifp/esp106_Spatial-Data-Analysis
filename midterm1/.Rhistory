citygauge[[i]]$City <- rep(city[i], nrow(tbles[[i]]))
}
citygauge[[i]]$City <- rep(city[i], nrow(citygauge[[i]]))
gauge <- list.files("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
id <- data.frame(city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi"), gauge)
#Hint: you can use list.files() to get a vector of all the file names in a directory. Setting full.names=TRUE in the list.files() function will give you the full path name that can be used by read.csv
#Hint 2: you might want to create a data frame using the first csv file. Then loop through from files 2 to 6 reading in the csv file and using rbind() to attach it to the bottom of your full data frame
#Hint 3: It will be easiest to add the names of the city to the data frames immediately after reading them in, before binding everything together into a single data-frame
gaugeid <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
for(i in 1:length(gaugeid)) {
assign(paste0("gauge", i),
read.csv(paste0("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data/",
gaugeid[i])))
}
gauge1$City <- "Boston"
gauge2$City <- "New York"
gauge3$City <- "Baltimore"
gauge4$City <- "Charleston"
gauge5$City <- "Miami"
gauge6$City <- "Corpus Christi"
allgauge <- rbind(gauge1,gauge2,gauge3,gauge4,gauge5,gauge6)
require("knitr")
opts_knit$set(root.dir = "C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\") #use this to set your working directory so knitr understands it
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W4 Lab\\ESP106_week4_data")
list.files(full.names=TRUE)
files <- list.files(pattern='csv')
tables <- lapply(files, read.csv)
city=c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi")
city <- c("Boston", "New York", "Baltimore", "Charleston", "Miami", "Corpus Christi")
gauge <- c("8443970","8518750","8574680","8665530","8723214","8775296")
id <- data.frame(city, gauge)
gauge <- list.files("C:/Users/Benny Panjaitan/Documents/GitHub/esp106-Naomi/W4 Lab/ESP106_week4_data")
id <- data.frame(city, gauge)
tables[[i]]$City <- rep(city[i], nrow(tables[[i]]))
tables[[i]]$City <- rep(City[i], nrow(tables[[i]]))
for(i in 1:length(city)) {
tables[[i]]$City <- rep(City[i], nrow(tables[[i]]))
}
for(i in 1:length(city)) {
tables[[i]]$city <- rep(city[i], nrow(tables[[i]]))
}
for(i in 1:length(city)) {
tables[[i]]$city <- rep(city[i], nrow(tables[[i]]))
}
require("knitr")
opts_knit$set(root.dir = "C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\") #use this to set your working directory so knitr understands it
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab")
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
View(country)
View(country)
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
order(country$total, decreasing=TRUE)
country$country[35,37,46,21,49]
country$country[35]
country$country[35, 37]
country$country[1:5]
country$country[1:5, order(country$total, decreasing=TRUE)]
order(country$total, decreasing=TRUE)
population = 5
order(country$total, decreasing=TRUE)
t <- order(country$total, decreasing=TRUE)
colnames(country$country[sample(5)])
rownames(country$country[sample(5)])
rownames(country[sample(5)])
colnames(country[sample(5)])
t[1:5]
t <- data.frame(order(country$total, decreasing=TRUE), country$country)
t[1:5]
head(t)
?order
country[order(country$total, decreasing=TRUE)]
print(country[order(country$total, decreasing=TRUE)])
print(country[order(country$total, decreasing=TRUE),])
country[order(country$total, decreasing=TRUE),]
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
?sample
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
?population
sample(
country[order(country$total, decreasing=TRUE),],5)
country[order(country$total, decreasing=TRUE),]
head(country[order(country$total, decreasing=TRUE),])
country[1:5]
country[1:5, country[order(country$total, decreasing=TRUE),]]
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
t <- country[order(country$total, decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5
library(dplyr)
top_n(country,5,total)
t
library(dplyr)
top_n(country,5,total)
order(top_n(country,5,total))
top_n(country,5,total)
t <- country[order(top_n(country,5,total),
decreasing=TRUE),]
t <- top_n(country,5,total)
country[order(t, decreasing=TRUE),]
order(t, decreasing=TRUE)
t <- country[order(country$total,
decreasing=TRUE),]
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=1))
top5 <- Reduce(cbind,
by(t,
t["country"],
head,
n=1))
top5
top5 <- Reduce(cbind,
by(t,
t["country"],
head,
n=5))
top5
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=5))
top5 <- Reduce(rbind,
by(t,
t["country"],
head,
n=2))
top5
?Reduce
t <- country[order(country$total,
decreasing=TRUE),]
head (t)
#hint order(datacolumn, decreasing=TRUE) will give you the ranking of the countries by the values in the data column
#you can use this to re-order the country data frame, ordering it from the country with the most trash picked up to the least
n_top(country, 5, total)
top_n(country, 5, total)
top5 <- top_n(country, 5, total)
order(top5, descending=TRUE)
View(top5)
View(top5)
order(top5$total, descending=TRUE)
t5 <- order(top5$total, descending=TRUE)
top5
top5 >%>
top5 <- top_n(country, 5, total)
arrange(top5)
arrange(top5, desc())
arrange.data.frame(top5, desc())
arrange(top5,...,desc())
arrange(top5,desc())
arrange(desc(top5))
arrange(top5, desc(), total)
arrange(top5, desc())
arrange(top5, desc(), .by_group=TRUE)
arrange(top5, desc(total), .by_group=TRUE)
arrange(top5, desc(total))
top5 <- arrange(top5, desc(total))
View(top5)
top5 <- arrange(top_n(country, 5, total), desc(total))
top5
plot(countries~volunteers, data=country)
plot(country~volunteers, data=country)
plot(country~volunteers, data=country, ylim=0,705000)
t <-
head (country[order(country$total,
decreasing=TRUE),])
head (country[order(country$total,
decreasing=TRUE),])
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
country <- read.csv("countrytotals.csv")
tidytue <- read.csv("countrytotals.csv")
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\W5 Lab\\ESP106_week5_data")
tidytue <- read.csv("countrytotals.csv")
head (tidytue[order(tidytue$total,
decreasing=TRUE),])
library(dplyr)
top5 <- arrange(top_n(tidytue, 5, total), desc(total))
top5
library(ggplot2)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point()
library(ggplot2)
ggplot(tidytue, aes(x = country)) +
geom_histogram(binwidth = .5)
library(ggplot2)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram()
library(ggplot2)
ggplot(tidytue, aes(x=country)) +
geom_histogram()
View(tidytue)
library(ggplot2)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram()
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram(bins=3)
ggplot(tidytue, aes(x=volunteers)) +
geom_histogram(bins=10)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,50) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,1000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,705000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,7000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_point() +
ylim(0,705000) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
library(ggplot2)
ggplot(tidytue, aes(x=volunteers, y=country)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity") +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()+
scale_x_continuous(n.breaks=10) +
scale_y_continuous(n.breaks=10)
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity", width=1) +
coord_flip()
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "count", width=1) +
coord_flip()
library(ggplot2)
ggplot(tidytue, aes(x=country, y=volunteers)) +
geom_bar(stat = "identity") +
coord_flip()
tab <- cbind(Name=c("speciesid", "speciesname", "taxon", "conservation status", "listed"), Description = c("unique ID", "scientific name", "Species group", "Conservation status in North America, according to   [NatureServe](https://www.natureserve.org/conservation-tools/conservation-rank-calculator): 1 = Critically Imperiled; 2 = Imperiled; 3 = Vulnerable; 4 = Apparently Secure; 5 = Secure; UNK = Unknown; Prob. Extinct = Probably Extinct; Extinct", "Is the species listed as threatened or endangered under the US Endangered Species Act: 0 = No; 1 = Yes"))
knitr::kable(tab, caption ='Table 1. Variables in "consevationdata.csv"' )
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\Midterm")
consdata <- read.csv("conservationdata.csv")
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
end/all*100
end_fr <- cat(end/end,"/",all/end)
end_fr
# Chunk 1
library(knitr)
# Chunk 2
tab <- cbind(Name=c("speciesid", "speciesname", "taxon", "conservation status", "listed"), Description = c("unique ID", "scientific name", "Species group", "Conservation status in North America, according to   [NatureServe](https://www.natureserve.org/conservation-tools/conservation-rank-calculator): 1 = Critically Imperiled; 2 = Imperiled; 3 = Vulnerable; 4 = Apparently Secure; 5 = Secure; UNK = Unknown; Prob. Extinct = Probably Extinct; Extinct", "Is the species listed as threatened or endangered under the US Endangered Species Act: 0 = No; 1 = Yes"))
knitr::kable(tab, caption ='Table 1. Variables in "consevationdata.csv"' )
# Chunk 3
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\Midterm")
consdata <- read.csv("conservationdata.csv")
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
all/end
end/all*100
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
all/end
end/all*100
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
all/end
end/all*100
tx <- as.data.frame(table(consdata$taxon))
View(tx)
View(tx)
tx <- cbind(tx, tx$Freq/all*100)
colnames(tx) <- c("Taxonomic Groups", "Number of Species", "Percentage (%)")
tx
ts <- data.frame (consdata$taxon, consdata$conservation_status)
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="stack", stat="count")
library(ggplot2)
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="stack", stat="count")
View(ts)
colnames(tsf) <- c("Taxonomic Groups", "Conservation Status")
colnames(ts) <- c("Taxonomic Groups", "Conservation Status")
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="stack", stat="count")
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count")
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Unknown", "Probably Extinct", "Extinct", "No Data"))
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count")
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Extinct", "Probably Extinct", "Unknown", "No Data"))
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
labs(title="Relative Distribution of \n Conservation Status for each Taxonomic Group", y = "Relative Number") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Extinct", "Probably Extinct", "Unknown", "No Data"))
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
labs(title="Relative Distribution of Conservation Status for each Taxonomic Group", y = "Relative Number") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Extinct", "Probably Extinct", "Unknown", "No Data"))
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
labs(title="Relative Distribution of Conservation Status for each Taxonomic Group", y = "Relative Numbers") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Extinct", "Probably Extinct", "Unknown", "No Data"))
spend <- read.csv("spendingdata.csv")
sp2016 <- subset(spend, Year == "2016")
ggplot(spend2016, aes(x=spending)) +
geom_density()
ggplot(sp2016, aes(x=spending)) +
geom_density()
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="#69b3a2", color="#e9ecef", alpha=0.8)
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="black", alpha=0.8)
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8)
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending on Conservation in 2016", limits=c(0, 1000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending on Conservation in 2016", limits=c(0, 100000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8)
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 100000000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 100000000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 10000000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 1000000)) +
scale_y_continuous(name="Spending Density", limits=c(0, 0.00001))
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016") +
scale_y_continuous(name="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=(0, 100000000)) +
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 100000000)) +
scale_y_continuous(name="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", limits=c(0, 1000000)) +
scale_y_continuous(name="Spending Density")
View(sp2016)
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016") +
scale_y_continuous(name="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016", breaks=c(0, 100000000, 200000000)) +
scale_y_continuous(name="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
scale_x_continuous(name="Spending in 2016") +
scale_y_continuous(name="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
labs(title="Distribution of Spending in 2016", x="Spending in 2016", y="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_bar(position="fill", stat="count") +
labs(title="Distribution of Spending in 2016", x="Spending in 2016", y="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_bar(position="fill", stat="identity") +
labs(title="Distribution of Spending in 2016", x="Spending in 2016", y="Spending Density")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
labs(title="Distribution of Spending in 2016", x="Spending in 2016", y="Spending Density")
head (spend2016[order(spend2016$spending, decreasing=TRUE),])
head (sp2016[order(sp2016$spending, decreasing=TRUE),])
cosp <- merge(consdata, spend, by="speciesid")
top1 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "1632"),]
top2 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "4486"),]
top3 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "1684"),]
spc <- data.frame()
spc <- rbind.data.frame(top1, top2, top3)
spc
colnames(spc) <- c("Species ID", "Species Name", "Taxonomic Groups", "Conservation Status", "Listed", "Year", "Spending")
spc
library(knitr)
tab <- cbind(Name=c("speciesid", "speciesname", "taxon", "conservation status", "listed"), Description = c("unique ID", "scientific name", "Species group", "Conservation status in North America, according to   [NatureServe](https://www.natureserve.org/conservation-tools/conservation-rank-calculator): 1 = Critically Imperiled; 2 = Imperiled; 3 = Vulnerable; 4 = Apparently Secure; 5 = Secure; UNK = Unknown; Prob. Extinct = Probably Extinct; Extinct", "Is the species listed as threatened or endangered under the US Endangered Species Act: 0 = No; 1 = Yes"))
knitr::kable(tab, caption ='Table 1. Variables in "consevationdata.csv"' )
setwd("C:\\Users\\Benny Panjaitan\\Documents\\GitHub\\esp106-Naomi\\Midterm")
consdata <- read.csv("conservationdata.csv")
all <- nrow(consdata)
end <- nrow(consdata[consdata$listed == '1',])
all/end
end/all*100
tx <- as.data.frame(table(consdata$taxon))
tx <- cbind(tx, tx$Freq/all*100)
colnames(tx) <- c("Taxonomic Groups", "Number of Species", "Percentage (%)")
tx
ts <- data.frame (consdata$taxon, consdata$conservation_status)
colnames(ts) <- c("Taxonomic Groups", "Conservation Status")
library(ggplot2)
ggplot(ts, aes(`Taxonomic Groups`, fill=`Conservation Status`)) +
geom_bar(position="fill", stat="count") +
labs(title="Relative Distribution of Conservation Status for each Taxonomic Group", y = "Relative Numbers") +
scale_fill_discrete(labels = c("Critically Imperiled", "Imperiled", "Vulnerable", "Apparently Secure", "Secure", "Extinct", "Probably Extinct", "Unknown", "No Data"))
spend <- read.csv("spendingdata.csv")
sp2016 <- subset(spend, Year == "2016")
ggplot(sp2016, aes(x=spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
labs(title="Distribution of Spending in 2016", x="Spending in 2016", y="Spending Density")
head (sp2016[order(sp2016$spending, decreasing=TRUE),])
cosp <- merge(consdata, spend, by="speciesid")
top1 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "1632"),]
top2 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "4486"),]
top3 <- cosp[which(cosp$Year == "2016" & cosp$speciesid == "1684"),]
spc <- data.frame()
spc <- rbind.data.frame(top1, top2, top3)
spc
spc <- subset(spc, select=c(1,2,3))
spc
colnames(spc) <- c("Species ID", "Species Name", "Taxonomic Groups")
spc
spc <- subset(spc, select=c(1,2,3,7))
spc <- rbind.data.frame(top1, top2, top3)
spc
spc <- subset(spc, select=c(1,2,3,7))
colnames(spc) <- c("Species ID", "Species Name", "Taxonomic Groups", "Spending")
spc
spc <- cbind(c("Chinook salmon", "Rainbow trout", "Coho salmon"))
spc
spc <- data.frame()
spc <- rbind.data.frame(top1, top2, top3)
spc
spc <- subset(spc, select=c(1,2,3,7))
colnames(spc) <- c("Species ID", "Species Name", "Taxonomic Groups", "Spending")
name <- c("Chinook salmon", "Rainbow trout", "Coho salmon")
spc <- cbind.data.frame(spc, name)
spc
spc <- data.frame()
spc <- rbind.data.frame(top1, top2, top3)
spc
spc <- subset(spc, select=c(1,2))
name <- c("Chinook salmon", "Rainbow trout", "Coho salmon")
spc <- cbind.data.frame(spc, name)
colnames(spc) <- c("Species ID", "Species Name", "Common Name")
spc
cslog <- cosp[cosp$spending!="0",]
cslog <- transform(
cslog, log_spending = log(cslog$spending))
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8)
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
labs(title="Distribution of Spending", x="Spending in Logarithmic Scale", y="Spending Density")
ggplot(cslog, aes(x=log_spending)) +
geom_density(fill="darkgreen", color="grey", alpha=0.8) +
labs(title="Distribution of Spending from 2006 to 2016", x="Spending in Logarithmic Scale", y="Spending Density")
reg <- lm(log_spending~taxon, data=cslog)
summary.lm(reg)
